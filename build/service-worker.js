const s=location.pathname.split("/").slice(0,-1).join("/"),m=[s+"/_app/immutable/entry/app.XGNQdisn.js",s+"/_app/immutable/nodes/0.BNJDv4XE.js",s+"/_app/immutable/assets/0.Bvty4Bkb.css",s+"/_app/immutable/assets/page test component.DKWh-TCr.css",s+"/_app/immutable/nodes/1.CmqpHUvk.js",s+"/_app/immutable/nodes/10.Di7r1V8z.js",s+"/_app/immutable/nodes/11.COpkGIbW.js",s+"/_app/immutable/nodes/2.CwaflmS8.js",s+"/_app/immutable/assets/2.B9lrdAyL.css",s+"/_app/immutable/nodes/3.c2nf-f-C.js",s+"/_app/immutable/nodes/4.B7hxENjN.js",s+"/_app/immutable/nodes/5.H7fYvESt.js",s+"/_app/immutable/nodes/6.vuqSjcd7.js",s+"/_app/immutable/nodes/7.9xms2_he.js",s+"/_app/immutable/nodes/8.O8N7UD_F.js",s+"/_app/immutable/nodes/9.BwVFpruO.js",s+"/_app/immutable/chunks/4SCj26gG.js",s+"/_app/immutable/chunks/A5zQtRJO.js",s+"/_app/immutable/chunks/BUcddZWM.js",s+"/_app/immutable/chunks/C6zi0ixi.js",s+"/_app/immutable/chunks/CW6MHHLt.js",s+"/_app/immutable/chunks/D1VawLYl.js",s+"/_app/immutable/chunks/DKptJa7U.js",s+"/_app/immutable/chunks/DYG1lnF5.js",s+"/_app/immutable/chunks/wz-st_LJ.js",s+"/_app/immutable/chunks/zom1DBKk.js",s+"/_app/immutable/entry/start.C6RSdmED.js"],o=[s+"/apple-touch-icon-180x180.png",s+"/favicon.ico",s+"/generic.png",s+"/manifest.json",s+"/maskable-icon-512x512.png",s+"/Monytri-01-1.png",s+"/Property 1=Inbox.svg",s+"/pwa-192x192.png",s+"/pwa-512x512.png",s+"/pwa-64x64.png"],l="1740091437917";console.log({build:m,files:o,version:l});console.log("service worker is running");const i=`cache-${l}`,u=[...m,...o];self.addEventListener("install",e=>{async function n(){await(await caches.open(i)).addAll(u)}e.waitUntil(n())});self.addEventListener("activate",e=>{async function n(){for(const t of await caches.keys())t!==i&&await caches.delete(t)}e.waitUntil(n())});self.addEventListener("fetch",e=>{if(e.request.method!=="GET")return;async function n(){const t=new URL(e.request.url),p=await caches.open(i);if(u.includes(t.pathname)){const a=await p.match(t.pathname);if(a)return a}try{const a=await fetch(e.request);if(!(a instanceof Response))throw new Error("invalid response from fetch");return a.status===200&&p.put(e.request,a.clone()),a}catch(a){const c=await p.match(e.request);if(c)return c;throw a}}e.respondWith(n())});self.addEventListener("message",e=>{e.data&&e.data.type==="SKIP_WAITING"&&self.skipWaiting()});
