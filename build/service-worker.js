const s=location.pathname.split("/").slice(0,-1).join("/"),m=[s+"/_app/immutable/entry/app.BMIxFOJM.js",s+"/_app/immutable/nodes/0.DFjISr-s.js",s+"/_app/immutable/assets/0.By0cKmG3.css",s+"/_app/immutable/nodes/1.D-aZdZAl.js",s+"/_app/immutable/nodes/10.BKpkYxPh.js",s+"/_app/immutable/nodes/11.CeV5gL_H.js",s+"/_app/immutable/nodes/2.DIIY1zQh.js",s+"/_app/immutable/assets/2.B9lrdAyL.css",s+"/_app/immutable/nodes/3.kZjuFrMt.js",s+"/_app/immutable/nodes/4.DgKyEO5c.js",s+"/_app/immutable/nodes/5.BzH0ma5m.js",s+"/_app/immutable/nodes/6.DxzxyA43.js",s+"/_app/immutable/nodes/7.DFX5Kdlg.js",s+"/_app/immutable/nodes/8.D4jSNQB8.js",s+"/_app/immutable/nodes/9.cyBPOGQh.js",s+"/_app/immutable/assets/page test component.CTrl6uAt.css",s+"/_app/immutable/chunks/4SCj26gG.js",s+"/_app/immutable/chunks/A5zQtRJO.js",s+"/_app/immutable/chunks/BUcddZWM.js",s+"/_app/immutable/chunks/Bsnl8-Nc.js",s+"/_app/immutable/chunks/C6zi0ixi.js",s+"/_app/immutable/chunks/CCjwn0TV.js",s+"/_app/immutable/chunks/CIvc8CP4.js",s+"/_app/immutable/chunks/Cp91xm1x.js",s+"/_app/immutable/chunks/D1VawLYl.js",s+"/_app/immutable/chunks/DKptJa7U.js",s+"/_app/immutable/chunks/wz-st_LJ.js",s+"/_app/immutable/entry/start.CY3_Dvzp.js"],o=[s+"/apple-touch-icon-180x180.png",s+"/favicon.ico",s+"/generic.png",s+"/manifest.json",s+"/maskable-icon-512x512.png",s+"/Monytri-01-1.png",s+"/Property 1=Inbox.svg",s+"/pwa-192x192.png",s+"/pwa-512x512.png",s+"/pwa-64x64.png"],l="1740996944177";console.log({build:m,files:o,version:l});console.log("service worker is running");const i=`cache-${l}`,u=[...m,...o];self.addEventListener("install",a=>{async function n(){await(await caches.open(i)).addAll(u)}a.waitUntil(n())});self.addEventListener("activate",a=>{async function n(){for(const t of await caches.keys())t!==i&&await caches.delete(t)}a.waitUntil(n())});self.addEventListener("fetch",a=>{if(a.request.method!=="GET")return;async function n(){const t=new URL(a.request.url),p=await caches.open(i);if(u.includes(t.pathname)){const e=await p.match(t.pathname);if(e)return e}try{const e=await fetch(a.request);if(!(e instanceof Response))throw new Error("invalid response from fetch");return e.status===200&&p.put(a.request,e.clone()),e}catch(e){const c=await p.match(a.request);if(c)return c;throw e}}a.respondWith(n())});self.addEventListener("message",a=>{a.data&&a.data.type==="SKIP_WAITING"&&self.skipWaiting()});
