const e=location.pathname.split("/").slice(0,-1).join("/"),o=[e+"/_app/immutable/entry/app.rFVkdaDi.js",e+"/_app/immutable/nodes/0.y3PA2q_N.js",e+"/_app/immutable/assets/0.Cs1WjSpH.css",e+"/_app/immutable/assets/page test component.B82w80CU.css",e+"/_app/immutable/nodes/1.UUz5aN9G.js",e+"/_app/immutable/nodes/10.e9wPpKRl.js",e+"/_app/immutable/nodes/11.e9wPpKRl.js",e+"/_app/immutable/nodes/2.C44KMNI2.js",e+"/_app/immutable/assets/2.Cys59M54.css",e+"/_app/immutable/nodes/3.e9wPpKRl.js",e+"/_app/immutable/nodes/4.2Tg_heZK.js",e+"/_app/immutable/nodes/5.J0Ov-rsR.js",e+"/_app/immutable/nodes/6.e9wPpKRl.js",e+"/_app/immutable/nodes/7.BVcxdUlp.js",e+"/_app/immutable/nodes/8.XMi6_Ni8.js",e+"/_app/immutable/nodes/9.vVV-vQxU.js",e+"/_app/immutable/chunks/B1Jt6jGi.js",e+"/_app/immutable/chunks/BAm89jq4.js",e+"/_app/immutable/chunks/BbzjSxgW.js",e+"/_app/immutable/chunks/BzlV_d4j.js",e+"/_app/immutable/chunks/C7XHzklz.js",e+"/_app/immutable/chunks/CrUGl9sq.js",e+"/_app/immutable/chunks/DOyYx-zZ.js",e+"/_app/immutable/chunks/DwKKyzR2.js",e+"/_app/immutable/chunks/Smy7NwvE.js",e+"/_app/immutable/entry/start.Dx58-Ptb.js"],l=[e+"/apple-touch-icon-180x180.png",e+"/favicon.ico",e+"/generic.png",e+"/manifest.json",e+"/maskable-icon-512x512.png",e+"/Monytri-01-1.png",e+"/Property 1=Inbox.svg",e+"/pwa-192x192.png",e+"/pwa-512x512.png",e+"/pwa-64x64.png"],m="1739912799215";console.log({build:o,files:l,version:m});console.log("service worker is running");const i=`cache-${m}`,u=[...o,...l];self.addEventListener("install",s=>{async function n(){await(await caches.open(i)).addAll(u)}s.waitUntil(n())});self.addEventListener("activate",s=>{async function n(){for(const t of await caches.keys())t!==i&&await caches.delete(t)}s.waitUntil(n())});self.addEventListener("fetch",s=>{if(s.request.method!=="GET")return;async function n(){const t=new URL(s.request.url),p=await caches.open(i);if(u.includes(t.pathname)){const a=await p.match(t.pathname);if(a)return a}try{const a=await fetch(s.request);if(!(a instanceof Response))throw new Error("invalid response from fetch");return a.status===200&&p.put(s.request,a.clone()),a}catch(a){const c=await p.match(s.request);if(c)return c;throw a}}s.respondWith(n())});self.addEventListener("message",s=>{s.data&&s.data.type==="SKIP_WAITING"&&self.skipWaiting()});
